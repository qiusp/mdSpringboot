server:
  port: 8080

# 其中 [host] 是 MySQL 服务器的地址，[port] 是 MySQL 服务器的端口，[database] 是数据库名称，[username] 是登录数据库的用户名，[password] 是登录数据库的密码。
#  [driver-class-nam] 驱动,[type]连接池druid
spring:
  datasource:
    username: root
    password: root
    url: jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    #druid 数据源专有配置
    druid:
      # 初始化时建立物理连接的个数
      initial-size: 5
      # 连接池的最小空闲数量
      min-idle: 5
      # 连接池最大连接数量
      max-active: 20
      # 获取连接时最大等待时间，单位毫秒
      max-wait: 60000
      # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 既作为检测的间隔时间又作为testWhileIdel执行的依据
      time-between-eviction-runs-millis: 60000
      # 销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接(配置连接在池中的最小生存时间)
      min-evictable-idle-time-millis: 30000
      # 用来检测数据库连接是否有效的sql 必须是一个查询语句(oracle中为 select 1 from dual)
      validation-query: select 'x'
      # 申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
      test-on-borrow: false
      # 归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
      test-on-return: false
      # 是否缓存preparedStatement, 也就是PSCache,PSCache对支持游标的数据库性能提升巨大，比如说oracle,在mysql下建议关闭。
      pool-prepared-statements: false
      # 置监控统计拦截的filters，去掉后监控界面sql无法统计，stat: 监控统计、Slf4j:日志记录、waLL: 防御sqL注入
      filters: stat,wall,slf4j
      # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
      max-pool-prepared-statement-per-connection-size: -1
      # 合并多个DruidDataSource的监控数据
      use-global-data-source-stat: true
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
#    #  配置监控(可在配置文件中配置)
#      web-stat-filter:
#        # 是否启用StatFilter默认值true
#        enabled: true
#        # 添加过滤规则
#        url-pattern: /*
#        # 忽略过滤的格式
#        exclusions: /druid/*,*.js,*.gif,*.jpg,*.png,*.css,*.ico
#    #  StatViewServlet配置：Druid内置提供了一个StatViewServlet用于展示Druid的统计信息，StatViewServlet的用途包括：
#    #  提供监控信息展示的html页面
#    #  提供监控信息的JSON API
#      stat-view-servlet:
#        # 是否启用StatViewServlet默认值true
#        enabled: true
#        # 访问路径为/druid时，跳转到StatViewServlet
#        url-pattern: /druid/*
#        # 是否能够重置数据
#        reset-enable: false
#        # 需要账号密码才能访问控制台，默认为root
##        login-username: druid
##        login-password: druid
#        # IP白名单
#        allow: 127.0.0.1
#        # IP黑名单（共同存在时，deny优先于allow）
#        deny:


#mybatis-plus:
#  # 指定Mapper XML文件的位置，使用classpath通配符指定路径。
#  mapper-locations: classpath*:mapping/*Mapping.xml
#  # 指定实体类的包路径，用于自动扫描并注册类型别名。
#  type-aliases-package: com.zskx.service.card.model.*
#  # 全局配置
#  global-config:
#    db-config:
#      #id-type: ID_WORKER  # 主键ID的生成策略，可选值包括：AUTO、NONE、INPUT、ID_WORKER、UUID
#      #主键类型  0:"数据库ID自增", 1:"不操作", 2:"用户输入ID",3:"数字型snowflake", 4:"全局唯一ID UUID", 5:"字符串型snowflake";
#      id-type: AUTO
#      #机器 ID 部分(影响雪花ID)
#      workerId: 1
#      #数据标识 ID 部分(影响雪花ID)(workerId 和 datacenterId 一起配置才能重新初始化 Sequence)
#      datacenterId: 18
#      # 字段验证策略，可选值包括：not_null、not_empty、default
#      field-strategy: not_empty
#      #驼峰下划线转换（将数据库字段的下划线命名规则转换为 Java 实体类属性的驼峰命名规则）
#      db-column-underline: true
#      #刷新mapper 调试神器
#      refresh-mapper: true
#      #数据库大写下划线转换
#      #capital-mode: true
#      #序列接口实现类配置
#      #key-generator: com.baomidou.springboot.xxx
#      #逻辑删除配置（下面3个配置）
#      logic-delete-field: deleted  # 逻辑删除字段名
#      logic-delete-value: 1  # 逻辑删除字段的值表示已删除
#      logic-not-delete-value: 0  # 逻辑删除字段的值表示未删除
#      #自定义SQL注入器
#      #sql-injector: com.baomidou.mybatisplus.mapper.LogicSqlInjector
#      #自定义填充策略接口实现
#      #meta-object-handler: com.baomidou.springboot.xxx
#      configuration:
#        # 将 Java 实体类属性的驼峰命名规则转换为数据库字段的下划线命名规则
#        map-underscore-to-camel-case: true
#        # 是否开启二级缓存。
#        cache-enabled: false
#        # 这个配置会将执行的sql打印出来，在开发或测试的时候可以用
#        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

